对于关系型数据库而言，受伤害比较大的操作就是频繁的查询操作
在关系型数据库里面，如果频繁查询的数据比较固定，就可以把这些数据摘出来，放到缓存里面，减轻数据库被访问的压力和负担

对于关系型数据库而言，事务的四大特性acid

nosql一般能做哪些事情
1、易扩展
nosql数据库种类繁多，但是一个共同的特点都是去掉关系型数据库的关系型特性
数据之间无关系，这样就非常容易扩展，也就在无形之间，在架构的层面上带来了可扩展的能力
2、大数据量高性能（一般地，redis一秒钟写可以8w次，读可以11w次，不管咋说，redis的读写能力非常强悍）
nosql数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀
这得益于它的无关系性，数据库的结构简单
一般地，mysql使用查询缓存，每次表的更新缓存就失效，是一种大粒度的缓存
针对交互频繁的web2.0的应用中，mysql的查询缓存效率不高，而nosql的缓存是记录级别的，是小粒度的缓存
是一种细粒度的缓存，所以nosql在这个层面上来说就要性能高很多了
3、多样灵活的数据模型
nosql无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式，而在关系型数据库里
增删字段是一件非常麻烦的事情，如果是非常大数据量的表，增加字段简直就是一个噩梦

比较传统的rdbms和nosql
rdbms
- 存储高度组织化结构化的数据
- 结构化查询语言（sql）
- 数据的结构和真正的数据都存储在单独的表中（表的结构，表的数据）
- 数据操纵语言，数据定义语言
- 严格的一致性
- 基础事务
nosql
- 代表着不仅仅是sql
- 没有声明性查询语言
- 没有预定义的数据的结构
- 键值对的方式存储数据，列存储，文档存储，图形数据库等
- 最终一致性，而非acid属性
- 非结构化的数据和不可预知的数据
- nosql数据库的CAP定理
- 高性能、高可用性、可伸缩性

如果你就想干一件事，专精于一件事，高速缓存的，就用memcached
如果你想expert in one and good at many things，就用redis

怎么玩redis？？？就这三个东西，key-value、cache、persistence

互联网时代的3v+3高
3v指的是大数据时代下的海量（Volume）、多样（Variety）、实时（Velocity）
说明：这实时一般做不到绝对的实时，都是准实时的
3高知道的是高并发、高性能（高可用）、高可扩
说明：高可扩指的是水平扩展，直接加机器，而不是垂直扩展，垂直扩展说白了就是强化机器的配置

当下的应用程序一般是搭配sql和nosql一起使用滴，各有用途

能在github上面向著名开源项目发pr，别人还通过了，说明你的技术功底非常强

多数据源（你所看到的文字、图片、音频、vcr等不可能统统放到mysql里面搞定，这些数据在不同的数据源里面）和多数据类型（文字、图片、音频、vcr等）的存储问题

技术的路上，找对方向和方法，坚持就会牛p，其它事情也一样

淘宝的商品波动性，热点高频词汇（比如情人节，rose就是高频词汇）就会被放到nosql里面（内存数据库、缓存数据库）

总结大型互联网应用（大数据量、高并发、多数据源和多数据类型）的难点和解决方案
借鉴jdbc的思想（面向接口编程），诞生了统一数据平台服务层UDSL，UDSL一统天下，只需要面向UDSL编程即可

分布式微服务架构的系统非常忌讳连接查询，高并发的操作不太建议有连接查询
适当的采取冗余字段的策略来避免关联查询，比如在商品表里面冗余商品类别名称这种不太会被经常改变的字段
但是要注意改变了商品类别名称要同步更新你的那个商品表，否则就是脏数据了
分布式事务是支持不了太多的并发的

聚合的数据模型常见的有：键值对模型、bson模型、列族模型、图形模型
说明：列族模型说白了就是纵表，我们一般都是设置横表，详情谷歌搜索横表和纵表以及应用场景，图形模型典型例子就是复杂的人际关系


